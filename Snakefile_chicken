# This should be placed in the Snakefile.
##-----------------------------------------------##
## Working directory                             ##
## Adapt to your needs                           ##
##-----------------------------------------------##

BASE_DIR = "/30days/uqkchew2/04.Marcus_data/Marcus_data"
WDIR = BASE_DIR + "/Chicken/FASTQ_files"

##--------------------------------------------------------------------------------------##
## Variables declaration
## Declaring some variables used by topHat and other tools...
## (GTF file, INDEX, chromosome length)
##--------------------------------------------------------------------------------------##
# Adapt the path to your needs

GENOME_DIR = "/30days/uqkchew2/chicken"
GENOME = GENOME_DIR + "/chicken"
GTF = GENOME_DIR + "/chicken.gtf"
REF = GENOME_DIR + "/chicken/chicken.fasta"
##--------------------------------------------------------------------------------------##
## Rules to run locally
##--------------------------------------------------------------------------------------##
localrules: awk1


#GENOME_DIR = "/30days/uqakaraw/chicken"
#GTF = GENOME_DIR + "/chicken.gtf"
#GENOME = GENOME_DIR + "/chicken"

##--------------------------------------------------------------------------------------##
## The list of samples to be processed
##--------------------------------------------------------------------------------------##

SAMPLES, = glob_wildcards( WDIR + "/{smp}_1.fastq.gz")
NB_SAMPLES = len(SAMPLES)

rule all:
        input:
         out = expand("htseq/{smp}.tsv",smp=SAMPLES),
         out2 = expand("stringtie_gtf/{smp}.gtf",smp=SAMPLES)

rule fastqc1:
        input:
         fwd= WDIR + "/{smp}_1.fastq.gz",
         rev= WDIR + "/{smp}_2.fastq.gz"
        output:
         fwd= "fastqc/{smp}/{smp}_1_fastqc.zip",
         rev= "fastqc/{smp}/{smp}_2_fastqc.zip"
        conda: "env/transcriptome.yaml"
        message: """--- Quality check of raw data with Fastqc."""
        shell:
         "mkdir -p fastqc && fastqc --outdir fastqc/{wildcards.smp} --extract -f fastq {input.fwd} {input.rev}"

rule trimming:
        input:
         fwd = WDIR + "/{smp}_1.fastq.gz",
         rev = WDIR + "/{smp}_2.fastq.gz",
         fq1 = rules.fastqc1.output.fwd,
         fq2 = rules.fastqc1.output.rev
        output:
         fwd="results/trimmed/{smp}/{smp}_val_1.fq.gz",
         rev="results/trimmed/{smp}/{smp}_val_2.fq.gz"
        message: """--- Trimming."""
        conda: "env/transcriptome.yaml"
        threads: 12
        params:
         base = "results/trimmed/{smp}"
        shell:
         "trim_galore --paired --phred33 --basename {wildcards.smp} -j {threads} --output_dir {params.base} --length 36 -q 5 --stringency 1 -e 0.1 "
         "{input.fwd} {input.rev} > output.out 2>&1"

rule fastqc2:
        input:
         fwd = rules.trimming.output.fwd,
         rev = rules.trimming.output.rev
        output:
         fwd=temp("fastqc2/{smp}/{smp}_val_1_fastqc/fastqc_data.txt"),
         rev=temp("fastqc2/{smp}/{smp}_val_2_fastqc/fastqc_data.txt")
        message: """--- Quality check of raw data with Fastqc"""
        conda: "env/transcriptome.yaml"
        shell: "fastqc --outdir fastqc2/{wildcards.smp} --extract -f fastq {input.fwd} {input.rev}"

rule star:
        input:
         fwd = rules.trimming.output.fwd,
         rev = rules.trimming.output.rev,
        output:
         bam = "results/STAR_bam/{smp}Aligned.sortedByCoord.out.bam"
        params:
         genome = GENOME
        threads: 12
        conda: "env/star.yaml"
        shell:
         "STAR --runMode alignReads --runThreadN {threads} --readFilesCommand zcat "
         " --outSAMtype BAM SortedByCoordinate --genomeDir {params.genome} --readFilesIn {input.fwd} {input.rev} "
         "--outFileNamePrefix results/STAR_bam/{wildcards.smp} "
         "--outFilterType BySJout --outFilterMultimapNmax 20 --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 --alignIntronMin 20"

rule htseq:
        input:
         BAM = rules.star.output.bam,
         gtf = GTF
        output:
         OUT = "htseq/{smp}.tsv",
         ERR = "htseq/log/{smp}.err"
        conda: "env/htseq.yaml"
        shell:
         "htseq-count -f bam --order=pos -s no -a 10 -t exon -i gene_id -m intersection-nonempty {input.BAM} {input.gtf} > {output.OUT} 2> {output.ERR}"

rule stringtie01:
        input:
         fwd = rules.trimming.output.fwd,
         rev = rules.trimming.output.rev,
         bam = rules.star.output.bam,
         gtf = GTF,
         ht = rules.htseq.output.OUT
        output:
         out = temp("stringtie_tab/{smp}.list")
        message: "--- Diffrential Gene Expression Analysis with Stringtie step 01"
        threads: 20
        conda: "env/stringtie.yaml"
        shell:
         "mkdir -p stringite_gtf && stringtie {input.bam} -C {wildcards.smp}.1.ref.gtf -A {wildcards.smp}.1.tab -p {threads} -G {input.gtf} -o {wildcards.smp}.out.gtf && ls *.out.gtf"
         " > {output.out} "

rule stringtie_merge:
        input:
         list = rules.stringtie01.output.out,
         gtf = GTF
        output:
         merge = "stringtie_gtf/{smp}_merged.gtf"
        conda:"env/stringtie.yaml"
        shell:
         " stringtie --merge -G {input.gtf} -o {output.merge} {input.list}"

rule stringtie02:
        message: "--- Diffrential Gene Expression Analysis with Stringtie step 02"
        conda: "env/stringtie.yaml"
        input:
         bam = rules.star.output.bam,
         gtf = rules.stringtie_merge.output.merge
        threads : 20
        output:
         out = "stringtie_gtf/{smp}.gtf"
        shell:
         " stringtie {input.bam} -eB -C {wildcards.smp}.2.ref.gtf -A stringtie_tab/{wildcards.smp}.2.tab -p {threads} -G {input.gtf} -o {output.out}"

rule clean:
        message: "-- Removing {params} --"
        params: "results", "fastqc","fastqc_dir","stringtie_gtf","star_input"
        shell: "rm -rf {params}"
